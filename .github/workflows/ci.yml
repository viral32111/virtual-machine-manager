name: CI

on:
  push:
    paths:
      - '**'
    branches:
      - '**'
    tags:
      - '*.*.*'
  workflow_dispatch:

# TODO: Build for Windows/macOS/Linux (musl/glibc), and x86_64/aarch64

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        name: [ Debug, Release ]
        include:
          - name: Debug
            target: debug
          - name: Release
            target: release
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Construct semantic version
        id: version
        uses: actions/github-script@v7
        env:
          REF_TYPE: ${{ github.ref_type }}
          REF_NAME: ${{ github.ref_name }}
        with:
          script: |
            const { REF_TYPE, REF_NAME } = process.env;

            if ( REF_TYPE === 'tag' && REF_NAME.match( /^\d+\.\d+\.\d+$/ ) ) {
              const [ major, minor, patch ] = REF_NAME.split( '.', 3 );
              if (major === undefined || minor === undefined || patch === undefined) throw new Error('Invalid version format!');

              const majorVersion = parseInt( major, 10 );
              const minorVersion = parseInt( minor, 10 );
              const patchVersion = parseInt( patch, 10 );
              if (isNaN(majorVersion) || isNaN(minorVersion) || isNaN(patchVersion)) throw new Error('Invalid version format!');

              core.setOutput( 'majorVersion', majorVersion );
              core.setOutput( 'minorVersion', minorVersion );
              core.setOutput( 'patchVersion', patchVersion );

              core.setOutput( 'semanticVersion', `${majorVersion}.${minorVersion}.${patchVersion}` );

              core.setOutput( 'binaryPath', `build/release/vmm-${majorVersion}.${minorVersion}.${patchVersion}` );
            } else {
              core.setOutput( 'majorVersion', 0 );
              core.setOutput( 'minorVersion', 0 );
              core.setOutput( 'patchVersion', 0 );

              core.setOutput( 'semanticVersion', '0.0.0' );

              core.setOutput( 'binaryPath', 'build/release/vmm-0.0.0' );
            }

      - name: Build via Make
        run: |
          make --jobs $(nproc) ${{ matrix.target }} \
            VMM_MAJOR_VERSION=${{ steps.version.outputs.majorVersion }} \
            VMM_MINOR_VERSION=${{ steps.version.outputs.minorVersion }} \
            VMM_PATCH_VERSION=${{ steps.version.outputs.patchVersion }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: build/${{ matrix.target }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
    permissions:
      contents: write
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: release
          path: build

      - name: Rename build artifact
        run: find build/release -type f -exec mv --verbose {} vmm-${{ github.ref_name }}-linux-amd64-glibc \;

      - name: Create draft release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          tag_name: ${{ github.ref_name }}
          files: vmm-${{ github.ref_name }}-linux-amd64-glibc
          token: ${{ secrets.GITHUB_TOKEN }}
